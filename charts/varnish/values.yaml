replicaCount: 1

nginx:
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: 1.25.4
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

# nginx.customconfig allows setting the name of a custom config file generated
# outside this helm chart
# customconfig: "testing"
  config:
    nginx.conf: |-
      events {}
      http {
        server {
          listen       81;
          location /health {
            return 200 'status: ok';
            access_log off;
          }

          location / {
            resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
            proxy_pass https://$http_x_should_go_to;
            proxy_set_header Host $http_x_should_go_to;
          }
        }
      }

varnish:
  image:
    repository: varnish
    pullPolicy: IfNotPresent
    tag: 7.5.0
  varnishSize: 100M
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  vcl:
    default.vcl: |-
        vcl 4.0;
        import cookie;
        backend default {
            .host = "localhost";
            .port = "81";
        }
        sub vcl_init {
        }
        sub vcl_recv {
          if (req.method == "GET" && req.url == "/health") {
            return(synth(200, "OK"));
          }
          set req.http.x-should-go-to = "www.example.com";
          set req.backend_hint = default;
        }
        sub vcl_backend_response {
          return (deliver);
        }
        sub vcl_deliver {
          if (obj.hits > 0) {
            set resp.http.X-Cache = "HIT";
          } else {
            set resp.http.X-Cache = "MISS";
          }
        }

varnishncsa:
  image:
    repository: varnish
    pullPolicy: IfNotPresent
    tag: 7.5.0
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


nameOverride: ""
fullnameOverride: ""
imagePullSecrets: []


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
